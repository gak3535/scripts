#!/bin/bash
#
# Author:               Jet Wilda <jet.wilda@gmail.com>
# Modifed by:           Jet Wilda <jet.wilda@gmail.com>
# Last Modified:        10/02/2012
#
# Description:
# 	script to backup files to a location and then remove them from the original location
#

DATE=`/bin/date +%Y%m%d`
CDIR=`/bin/pwd`
FIND=/usr/bin/find
MV=/bin/mv
GZIP=/usr/bin/gzip
LS=/bin/ls
SOURCEDIR=""
DESTDIR=""
NUMDAYS=""
COMPRESS="FALSE"
DEBUG="FALSE"
SCRIPT=$0

# source in the helper functions
if [ -f /usr/local/bin/functions ]
then
  . /usr/local/bin/functions
else
  echo -e "\033[1;31m MISSING FUNCTIONS FILE /usr/local/bin/functions! \033[0m"
  exit 1
fi
  
# make sure script was started by root or exit
enforceRoot

#usage directions
usage () {
 echo ""
 echo "Usage: $SCRIPT [options] -d dir_full_of_files_2_backup -b backup_dir -t days_old_files_need_2_be"
 echo "         -d dir_full_of_files_2_backup  # Directory to look for files older then X days to backup and purge"
 echo "         -b backup_directory            # Location to put a copy of the file before removing"
 echo "         -t days_old_files_need_2_be    # Number of days old the files need to be to be backed up and purged"
 echo "         -c                             # Compress the file that is being backed up. Default is off"
 echo "         -v verbose (debug)             # default is off"
 echo "         -h display this help message"
 echo ""
 echo " i.e. $SCRIPT -c -d /opt/log -b /opt/ArchiveLogs -t 7"
 echo ""
}

# determine the name of the new apache instance
if [[ $# < 6 ]]; then
 echo "number of arguments is ,$#,"
 usage
 exit 2
fi

while getopts "d:b:t:chv" options; do
  case $options in
    d ) SOURCEDIR=$OPTARG;;
    b ) DESTDIR=$OPTARG;;
    t ) NUMDAYS=$OPTARG;;
    c ) COMPRESS="TRUE";;
    v ) DEBUG="TRUE";;
    h ) usage;;
    \? ) usage
         exit 3;;
    * ) usage
          exit 3;;
  esac
done

# Source directory can not be blank
if [[ "$SOURCEDIR" == "" ]]
then
  echo -e "\033[1;31m YOU MUST SPECIFY THE SOURCE DIRECTORY! \033[0m"
  usage
  exit 4
elif [ ! -d $SOURCEDIR ]
then
  echo -e "\033[1;31m SOURCE DIRECTORY $SOURCEDIR doesn't exist or is not a directory! \033[0m"
  usage
  exit 4
fi

debug "The -d SOURCEDIR is ,$SOURCEDIR,"

# Destination directory can not be blank
if [[ "$DESTDIR" == "" ]]
then
  echo -e "\033[1;31m YOU MUST SPECIFY THE DESTINATION DIRECTORY! \033[0m"
  usage
  exit 5
elif [ ! -d $DESTDIR ]
then
  echo -e "\033[1;31m DESTINATION DIRECTORY $DESTDIR doesn't exist or is not a directory! \033[0m"
  usage
  exit 5
fi

debug "The -b DESTDIR is ,$DESTDIR,"

# The number of days old the files must be must not be blank
if [[ "$NUMDAYS" == "" ]]
then
  echo -e "\033[1;31m YOU MUST SPECIFY THE NUMBER OF DAYS OLD THE FILES MUST BE! \033[0m"
  usage
  exit 6
fi

debug "The -t NUMDAYS is ,$NUMDAYS,"

# Get list of files to be backed up
LIST=`$FIND $SOURCEDIR -mtime +${NUMDAYS}`
# Move all files older then NUMDAYS to destination directory
if [[ "$LIST" != "" ]]
then
  $FIND $SOURCEDIR -mtime +${NUMDAYS} -exec $MV {} $DESTDIR \;
  debug "files older then $NUMDAYS have been moved from $SOURCEDIR to $DESTDIR"
  # Go to the destination directory and compress all uncompressed files
  if [[ "$COMPRESS" == "TRUE" ]]
  then
    cd $DESTDIR
    FILES=`ls | grep -v .gz`
    gzip $FILES
    debug "$FILES have been compressed"
  fi
else
  debug "No files older then $NUMDAYS.  Nothing to do"
fi

